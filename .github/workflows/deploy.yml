name: CI/CD Pipeline

on:
  push:
    branches:
      - main      # Production deployment
      - staging   # Staging deployment

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Docker
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # Step 3: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 4: Build and push Docker image
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/e-commerce-api:latest

      # Step 5: Deploy to Server
      - name: Deploy to Server
        run: |
          # Save the SSH private key into a temporary file
          echo "$SSH_PRIVATE_KEY" > /tmp/id_rsa

          # Set the correct permissions for the private key
          chmod 600 /tmp/id_rsa

          # Use SSH to connect and run commands on the server
          ssh -i /tmp/id_rsa -o StrictHostKeyChecking=no ec2-user@3.88.99.34 << 'EOF'
          
          # Update and install necessary packages
          sudo dnf update -y
          sudo dnf install -y postgresql15 postgresql15-server docker git

          # Initialize PostgreSQL database (if needed)
          sudo mkdir -p /var/lib/pgsql/15/data
          sudo chown postgres:postgres /var/lib/pgsql/15/data
          sudo su - postgres -c "/usr/bin/initdb -D /var/lib/pgsql/15/data"

          # Start and enable PostgreSQL and Docker services
          sudo systemctl start postgresql-15
          sudo systemctl enable postgresql-15
          sudo systemctl start docker
          sudo systemctl enable docker

          # Add ec2-user to Docker group
          sudo usermod -aG docker ec2-user

          # Install Docker Compose
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-\$(uname -s)-\$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

          # Ensure services are running
          sudo systemctl status docker
          sudo systemctl status postgresql-15

          # Clone the project repository
          git clone https://github.com/<your-repo>/ecommerce-app.git || true
          cd ecommerce-app
          git pull origin main

          # Conditionally set up environment variables
          if [ "${GITHUB_REF}" == "refs/heads/main" ]; then
            cat <<ENV > .env.production
          POSTGRES_USER=${{ secrets.PROD_POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.PROD_POSTGRES_PASSWORD }}
          POSTGRES_DB=${{ secrets.PROD_POSTGRES_DB }}
          DB_HOST=${{ secrets.PROD_DB_HOST }}
          DB_PORT=5432
          JWT_SECRET=${{ secrets.PROD_JWT_SECRET }}
          SUPERADMIN_EMAIL=${{ secrets.PROD_SUPERADMIN_EMAIL }}
          SUPERADMIN_PASSWORD=${{ secrets.PROD_SUPERADMIN_PASSWORD }}
          ENV
          elif [ "${GITHUB_REF}" == "refs/heads/staging" ]; then
          cat <<ENV > .env.staging
          POSTGRES_USER=${{ secrets.STAGE_POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.STAGE_POSTGRES_PASSWORD }}
          POSTGRES_DB=${{ secrets.STAGE_POSTGRES_DB }}
          DB_HOST=${{ secrets.STAGE_DB_HOST }}
          DB_PORT=5432
          JWT_SECRET=${{ secrets.STAGE_JWT_SECRET }}
          SUPERADMIN_EMAIL=${{ secrets.STAGE_SUPERADMIN_EMAIL }}
          SUPERADMIN_PASSWORD=${{ secrets.STAGE_SUPERADMIN_PASSWORD }}
          ENV
          fi
          
          # Pull the latest Docker image and restart the app
          docker pull ${{ secrets.DOCKER_USERNAME }}/e-commerce-api:latest
          docker stop nest-app || true
          docker rm nest-app || true
          docker run -d --name nest-app -p 3000:3000 --env-file .env.production ${{ secrets.DOCKER_USERNAME }}/e-commerce-api:latest

          EOF
env:
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}