name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger on pushes to the main branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Docker
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # Step 3: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 4: Build and push Docker image
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/e-commerce-api:latest

      # Step 5: Deploy to the EC2 server
      - name: Deploy to Server
        run: |
          # Save the SSH private key into a temporary file
          echo "$SSH_PRIVATE_KEY" > /tmp/id_rsa
          
          # Set the correct permissions for the private key file
          chmod 600 /tmp/id_rsa
          
          # SSH into EC2 instance
          ssh -i /tmp/id_rsa -o StrictHostKeyChecking=no ec2-user@3.88.99.34 << 'EOF'
            # Step 6: Clone the repository if it's not already there
            if [ ! -d "/home/ec2-user/e-commerce-api" ]; then
              git clone https://github.com/RenzoJimenezB/ECommerce_API.git /home/ec2-user/ECommerce_API
            else
              cd /home/ec2-user/e-commerce-api && git pull origin main
            fi
          
            # Step 7: Navigate to the project directory
            cd /home/ec2-user/ECommerce_API
          
            # Step 8: Create or copy the .env.development file
            if [ ! -f ".env.development" ]; then
              echo "Creating .env.development file..."
              cat <<EOL > .env.development
              # Environment variables
              DB_NAME=${{ secrets.PROD_NAME }}
              DB_HOST=${{ secrets.PROD_HOST }}
              DB_USER=${{ secrets.PROD_USER }}
              DB_PASSWORD=${{ secrets.PROD_PASSWORD }}
              DB_PORT=5432
              POSTGRES_DB=${{ secrets.PROD_POSTGRES_DB}}
              POSTGRES_USER=${{ secrets.PROD_POSTGRES_USER}}
              POSTGRES_PASSWORD=${{ secrets.PROD_POSTGRES_PASSWORD}}
              JWT_SECRET=${{ secrets.PROD_JWT_SECRET }}
              SUPERADMIN_EMAIL=${{ secrets.PROD_SUPERADMIN_EMAIL }}
              SUPERADMIN_PASSWORD=${{ secrets.PROD_SUPERADMIN_PASSWORD }}
          EOL
            fi
          
            # Step 9: Pull the latest Docker image
            docker pull ${{ secrets.DOCKER_USERNAME }}/e-commerce-api:latest
          
            # Step 10: Run docker-compose to stop existing containers and start new ones
            docker-compose down || true
          
            # Remove any container with the name nest-app if it already exists
            docker rm -f nest-app || true
          
            # Start the containers using docker-compose
            docker-compose up -d
          
            # Step 11: Run docker-compose to stop existing containers and start new ones
            docker-compose down || true
            docker-compose up -d
          EOF
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}